@startuml Simulador de Robôs

' Definição do título do diagrama
title Simulador de Robôs - Diagrama de Classes

' Configurações de estilo para melhorar a visualização
skinparam classAttributeIconSize 0
skinparam classFontStyle bold
skinparam classBackgroundColor LightBlue
skinparam classArrowColor Navy
skinparam classBorderColor Navy

' Enumeração TipoObstaculo (implícita no seu código)
enum TipoObstaculo {
  + getAlturaPadrao() : int
  + getIntegridade() : int
}

' Classe Sensor (implícita no seu código)
class Sensor {
}

' Classe principal Robo
class Robo {
  - nome : String
  - direcao : String
  - posicaoX : int
  - posicaoY : int
  - integridade : int
  - operando : boolean
  - listaSensores : ArrayList<Sensor>
  # visivel : boolean
  + Robo(nome : String, direcao : String, posicaoX : int, posicaoY : int)
  + mover(deltaX : int, deltaY : int) : void
  + exibirPosicao() : String
  + getPosicaoX() : int
  + getPosicaoY() : int
  + getDirecao() : String
  + setDirecao(direcao : String) : void
  + getOperando() : boolean
  + setOperando(operando : boolean) : void
  + getNome() : String
  + setNome(nome : String) : void
  + getVisivel() : boolean
  + getIntegridade() : int
  + setIntegridade(integridade : int) : void
  + identificarObstaculo(ambiente : Ambiente, direcao : String) : ArrayList<Robo>
  + defender(dano : int) : String
  + distanciaRobo(robo : Robo) : double
  + {static} getDirecoesPossiveis() : ArrayList<String>
}

' Classe RoboTerrestre
class RoboTerrestre {
  - velocidadeMaxima : int
  + RoboTerrestre(nome : String, direcao : String, posicaoX : int, posicaoY : int, velocidadeMaxima : int)
  + mover(deltaX : int, deltaY : int, vel : int) : void
  + getVelocidadeMaxima() : int
  + setVelocidadeMaxima(vmax : int) : void
  + distanciaRobo(robo : RoboTerrestre) : double
  + distanciaRobo(alvo : RoboAereo) : double
}

' Classe RoboAereo
class RoboAereo {
  - altitude : int
  - altitudeMaxima : int
  + RoboAereo(n : String, d : String, x : int, y : int, h : int, hmax : int)
  + subir(metros : int) : void
  + descer(metros : int) : void
  + getAltitude() : int
  + getAltitudeMaxima() : int
  + setAltitudeMaxima(hMax : int) : void
  + distanciaRobo(robo : RoboTerrestre) : double
  + distanciaRobo(alvo : RoboAereo) : double
  + mover(X : int, Y : int, Z : int) : void
  + identificarObstaculo(ambiente : Ambiente, direcao : String) : ArrayList<Robo>
  + exibirPosicao() : String
}

' Classe Correios
class Correios {
  - capacidadeMax : int
  - pesoMax : float
  - pesoAtual : float
  - entregas : ArrayList<String>
  - pesos : ArrayList<Float>
  + Correios(nome : String, direcao : String, posicaoX : int, posicaoY : int, velocidadeMaxima : int, capacidadeMax : int, pesoMax : float)
  + carregarPacote(id : String, peso : float) : String
  + entregarPacote(id : String, destinoX : int, destinoY : int) : String
  + listarEntregas() : String
}

' Classe TanqueGuerra (implícita no seu código)
class TanqueGuerra {
  + TanqueGuerra(nome : String, direcao : String, posicaoX : int, posicaoY : int, velocidadeMaxima : int, municao : int, alcance : int)
}

' Classe DroneAtaque
class DroneAtaque {
  - municao : int
  - alcance : int
  - escudo : int
  + DroneAtaque(nome : String, dir : String, x : int, y : int, alt : int, altMax : int, muni : int, alc : int)
  + defender(dano : int) : String
  + atirar(alvoX : int, alvoY : int, alvoZ : int, nTiros : int, ambiente : Ambiente) : String
  + atirar(alvoX : int, alvoY : int, nTiros : int, ambiente : Ambiente) : String
  + atirar(robo : Robo, nTiros : int, ambiente : Ambiente) : String
  - executarTiro(dX : int, dY : int, dZ : int, aX : int, aY : int, aZ : int, nTiros : int, ambiente : Ambiente) : String
}

' Classe DroneVigilancia
class DroneVigilancia {
  - camuflado : boolean
  - alcance_radar : float
  - angulo_camera : float
  + DroneVigilancia(nome : String, dir : String, x : int, y : int, h : int, hmax : int, alc_rad : float, ang_cam : float)
  + identificarObstaculo(ambiente : Ambiente) : ArrayList<Robo>
  + varrerArea(ambiente : Ambiente, centroX : int, centroY : int, raio : int) : ArrayList<Robo>
  + isCamuflado() : boolean
  + acionarCamuflagem() : void
  + desabilitarCamuflagem() : void
  + getAlcanceRadar() : float
  + setAlcanceRadar(alcance_radar : float) : void
  + getAnguloCamera() : float
  + setAnguloCamera(angulo_camera : float) : void
}

' Classe Obstaculo
class Obstaculo {
  - x1 : int
  - x2 : int
  - y1 : int
  - y2 : int
  - altura : int
  - tipo : TipoObstaculo
  - integridade : int
  + Obstaculo(tipo : TipoObstaculo, x1 : int, x2 : int, y1 : int, y2 : int)
  + getX1() : int
  + getX2() : int
  + getY1() : int
  + getY2() : int
  + getAltura() : int
  + getTipo() : TipoObstaculo
  + getIntegridade() : int
  + setIntegridade(integridade : int) : void
}

' Classe Ambiente
class Ambiente {
  - tamX : int
  - tamY : int
  - tamZ : int
  - listaRobos : ArrayList<Robo>
  - listaObstaculos : ArrayList<Obstaculo>
  + Ambiente(tamX : int, tamY : int, tamZ : int)
  + dentroDosLimites(x : int, y : int) : boolean
  + dentroDosLimites(x : int, y : int, z : int) : boolean
  + adicionarRobo(robo : Robo) : void
  + getListaRobos() : ArrayList<Robo>
  + adicionarObstaculo(obstaculo : Obstaculo) : void
  + getListaObstaculos() : ArrayList<Obstaculo>
  + getTamX() : int
  + getTamY() : int
  + getTamZ() : int
  + criarRobo(tipo : int, subcategoria : int, atributo : Object...) : Robo
  + identificarObjetoPosicao(posX : int, posY : int) : Object
  + identificarObjetoPosicao(posX : int, posY : int, posZ : int) : Object
}

' Relações de herança
Robo <|-- RoboTerrestre
Robo <|-- RoboAereo
RoboTerrestre <|-- Correios
RoboTerrestre <|-- TanqueGuerra
RoboAereo <|-- DroneAtaque
RoboAereo <|-- DroneVigilancia

' Relações de associação
Obstaculo --> TipoObstaculo
Robo o--> "0..*" Sensor : possui
Ambiente o--> "0..*" Robo : contém
Ambiente o--> "0..*" Obstaculo : contém

@enduml