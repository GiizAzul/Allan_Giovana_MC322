package ambiente;

/**
 * Enum que define os diferentes tipos de obst√°culos dispon√≠veis no ambiente.
 * Cada tipo possui caracter√≠sticas espec√≠ficas como altura, integridade e efeitos no radar.
 */
public enum TipoObstaculo {
    PAREDE(3, 100, false, 0.2f,"‚¨ú"),
    ARVORE(5, 50, false, 0.2f, "üå≤"),
    PREDIO(10, 200, false, 0.7f,"üè¢"),
    BURACO(1, 0, true, 0, "üï≥Ô∏è "),
    OUTRO(-1, -1, false, 0, "O"); // Altura -1 representa valor variavel

    private final int alturaPadrao;
    private final int integridade;
    private final boolean indestrutivel;
    private final String representacao;

    // Se fator for 0, o obst√°culo n√£o √© vis√≠vel
    private final float fatorReducaoAlcanceRadar;

    /**
     * Construtor do enum que define as caracter√≠sticas de cada tipo de obst√°culo
     * @param alturaPadrao Altura padr√£o do obst√°culo em unidades do ambiente
     * @param integridade Pontos de vida/resist√™ncia do obst√°culo
     * @param indestrutivel Se true, o obst√°culo n√£o pode ser destru√≠do
     * @param fatorReducaoAlcanceRadar Fator que reduz o alcance do radar (0.0 a 1.0)
     * @param representacao S√≠mbolo visual usado para representar o obst√°culo no mapa
     */
    TipoObstaculo(int alturaPadrao, int integridade, boolean indestrutivel, float fatorReducaoAlcanceRadar, String representacao) {
        this.alturaPadrao = alturaPadrao;
        this.integridade = integridade;
        this.indestrutivel = indestrutivel;
        this.fatorReducaoAlcanceRadar = fatorReducaoAlcanceRadar;
        this.representacao=representacao;
    }

    /**
     * Retorna a representa√ß√£o visual do obst√°culo
     * @return String contendo o s√≠mbolo que representa o obst√°culo no mapa
     */
    public String getRepresentacao(){
        return representacao;
    }

    /**
     * Retorna a altura padr√£o do obst√°culo
     * @return Altura padr√£o em unidades do ambiente
     */
    public int getAlturaPadrao() {
        return alturaPadrao;
    }

    /**
     * Retorna a integridade (pontos de vida) do obst√°culo
     * @return Quantidade de dano que o obst√°culo pode receber antes de ser destru√≠do
     */
    public int getIntegridade() {
        return integridade;
    }

    /**
     * Verifica se o obst√°culo √© indestrut√≠vel
     * @return true se o obst√°culo n√£o pode ser destru√≠do, false caso contr√°rio
     */
    public boolean isIndestrutivel() {
        return indestrutivel;
    }

    /**
     * Retorna o fator de redu√ß√£o do alcance do radar
     * @return Valor entre 0.0 e 1.0 que representa quanto o obst√°culo reduz o alcance do radar
     *         (0.0 = invis√≠vel ao radar, 1.0 = bloqueia completamente o radar)
     */
    public float getFatorReducaoAlcanceRadar() {
        return fatorReducaoAlcanceRadar;
    }
}