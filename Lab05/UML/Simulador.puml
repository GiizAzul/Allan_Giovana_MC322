@startuml Simulador de Robôs

' Configurações de estilo
skinparam class {
    BackgroundColor #FFF3E0
    ArrowColor Navy
    BorderColor Navy
    FontSize 12
    FontName Arial
    AttributeFontSize 11
    FontStyle bold
}

skinparam class<<Geral>> {
    BackgroundColor #E3F2FD
}

skinparam class<<Sensor>> {
    BackgroundColor #F3E5F5
}

skinparam class<<Robo>> {
    BackgroundColor #E8F5E9
}

interface Destrutivel <<Robo>>
interface Atacante <<Robo>>
interface Comunicavel <<Robo>>
interface Identificantes <<Robo>>

enum TipoObstaculo <<Geral>>
enum MateriaisRobo <<Robo>>

class Ambiente <<Geral>>
class CentralComunicacao <<Geral>>
class Obstaculo <<Geral>>

abstract class Sensor <<Sensor>>
class GPS <<Sensor>>
class Barometro <<Sensor>>
class Radar <<Sensor>>
class Colisao <<Sensor>>

abstract class Robo <<Robo>>
abstract class RoboTerrestre <<Robo>>
abstract class RoboAereo <<Robo>>
class TanqueGuerra <<Robo>>
class Correios <<Robo>>
class DroneAtaque <<Robo>>
class DroneVigilancia <<Robo>>

' Interfaces
interface Entidade {
    + getX(): int
    + getY(): int
    + getZ(): int
    + getTipo(): TipoEntidade
    + getDescricao(): String
    + getRepresentacao(): String
}

interface Destrutivel {
    + defender(dano: int, ambiente: Ambiente): String
}

interface Atacante {
    + atirar(alvoX: int, alvoY: int, alvoZ: int, nTiros: int, ambiente: Ambiente): String
    + recarregar(nBalas: int): String
}

interface Comunicavel {
    + enviarMensagem(destinatario: Comunicavel, mensagem: String, central: CentralComunicacao): String
    + receberMensagem(remetente: Comunicavel, mensagem: String): String
}

interface Identificantes {
    + identificarObstaculo(): ArrayList<Obstaculo>
    + identificarRobo(): ArrayList<Robo>
}

' Enumerações
enum TipoEntidade {
    VAZIO
    ROBO
    OBSTACULO
    DESCONHECIDO
    --
    - representacao: String
    + getRepresentacao(): String
}

enum TipoObstaculo {
    PAREDE
    ARVORE
    PREDIO
    BURACO
    OUTRO
    --
    - alturaPadrao: final int
    - integridade: final int
    - indestrutivel: final boolean
    - fatorReducaoAlcanceRadar: final float
    --
    + getRepresentacao(): String
    + getAlturaPadrao(): int
    + getIntegridade(): int
    + isIndestrutivel(): boolean
    + getFatorReducaoAlcanceRadar(): float
}

enum MateriaisRobo {
    ALUMINIO
    ACO
    PLASTICO
    FIBRA_VIDRO
    FIBRA_CARBONO
    OUTRO
    --
    - fatorReducaoAlcanceRadar: final float
}

' Classes do Ambiente
class Ambiente {
    - tamX: final int
    - tamY: final int
    - tamZ: final int
    - entidades: ArrayList<Entidade>
    - mapa: TipoEntidade[][][]
    --
    + adicionarEntidade(entidade: Entidade): void
    + removerEntidade(entidade: Entidade): void
    + estaOcupado(x: int, y: int, z: int): boolean
    + moverEntidade(entidade: Entidade, novoX: int, novoY: int, novoZ: int): void
    + visualizarAmbiente(): String[][]
    + criarRobo(tipo: int, subcategoria: int, atributos: Object...): Robo
    + identificarEntidadePosicao(posX: int, posY: int, posZ: int): Entidade
}

class CentralComunicacao {
    - mensagens: ArrayList<String>
    --
    + exibirMensagens(): String
    + registrarMensagem(remetente: Comunicavel, destinatario: Comunicavel, msg: String): void
}

class Obstaculo {
    - x1, x2, y1, y2: final int
    - altura: int
    - tipo: final TipoObstaculo
    - integridade: int
    - indestrutivel: boolean
}

' Sensores
abstract class Sensor {
    - ativo: boolean
    --
    + {abstract} acionar(): T
}

class GPS {
    - robo: Robo
    --
    + acionar(): int[]
    + obterPosicaoX(): int
    + obterPosicaoY(): int
    + vincularRobo(robo: Robo): void
}

class Barometro {
    - pressaoAtmosferica: double
    - robo: Robo
    --
    - acionar(): double
}

class Radar {
    - robo: RoboAereo
    - ambiente: Ambiente
    - raioAlcance: int
    - anguloAlcance: int
    --
    + acionar(): ArrayList<Object>
    + verificacaoObstaculo(obstaculo: Obstaculo): boolean
    + verificacaoRobo(roboAmbiente: Robo): boolean
}

class Colisao {
    - robo: RoboTerrestre
    - ultimoRoboColidido: Robo
    - ultimoObstaculoColidido: Obstaculo
    - ambiente: Ambiente
    --
    + acionar(): int
}

' Robôs
abstract class Robo {
    - id: final int
    - {static} cont_robo: int
    - nome: String
    - direcao: String
    - posicaoX, posicaoY, posicaoZ: int
    - integridade: int
    - velocidade: int
    - estado: boolean
    - material: MateriaisRobo
    - tipo: TipoEntidade
    # visivel: boolean
    --
    + mover(deltaX: int, deltaY: int, ambiente: Ambiente): void
    + executarTarefa(argumentos: Object...): String
    + ligar(): void
    + desligar(): void
    + distanciaRobo(robo: Robo): double
    + distanciaObstaculo(obstaculo: Obstaculo): double
    + exibirPosicao(): String
}

abstract class RoboTerrestre {
    - velocidadeMaxima: int
    - sensorColisao: Colisao
    --
    + mover(deltaX: int, deltaY: int, vel: int, ambiente: Ambiente): void
    + executarTarefa(argumentos: Object...): String
    + distanciaRobo(robo: RoboTerrestre): double
    + distanciaRobo(alvo: RoboAereo): double
}

abstract class RoboAereo {
    - altitude: int
    - altitudeMaxima: int
    - barometro: Barometro
    - sensorRadar: Radar
    --
    + mover(X: int, Y: int, Z: int, ambiente: Ambiente): void
    + subir(metros: int, ambiente: Ambiente): void
    + descer(metros: int, ambiente: Ambiente): void
    + exibirPosicao(): String
    + executarTarefa(argumentos: Object...): String
}

class TanqueGuerra {
    - municaoMax: int
    - municaoAtual: int
    - alcance: int
    --
    + executarTarefa(argumentos: Object...): String
}

class Correios {
    - capacidadeMax: int
    - pesoMax: float
    - pesoAtual: float
    - entregas: ArrayList<String>
    - pesos: ArrayList<Float>
    --
    - carregarPacote(id: String, peso: float): String
    - moverEntrega(deltaX: int, deltaY: int, ambiente: Ambiente): boolean
    - entregarPacote(id: String, destinoX: int, destinoY: int, ambiente: Ambiente): String
    - listarEntregas(): String
    + executarTarefa(argumentos: Object...): String
}

class DroneAtaque {
    - municao: int
    - alcance: int
    - escudo: int
    --
    + atirar(robo: Robo, nTiros: int, ambiente: Ambiente): String
    - executarTiro(dX: int, dY: int, dZ: int, aX: int, aY: int, aZ: int, nTiros: int, ambiente: Ambiente): String
    + executarTarefa(argumentos: Object...): String
}

class DroneVigilancia {
    - camuflado: boolean
    - alcance_radar: float
    - angulo_camera: float
    --
    + varrerArea(ambiente: Ambiente, centroX: int, centroY: int, raio: int): ArrayList<Object>
    + acionarCamuflagem(): void
    + desabilitarCamuflagem(): void
    + executarTarefa(argumentos: Object...): String
}

' Relações de herança
Robo <|-- RoboTerrestre
Robo <|-- RoboAereo
Sensor <|-- GPS
Sensor <|-- Barometro
Sensor <|-- Radar
Sensor <|-- Colisao

RoboTerrestre <|-- Correios
RoboTerrestre <|-- TanqueGuerra
RoboAereo <|-- DroneAtaque
RoboAereo <|-- DroneVigilancia

' Relações de associação
Ambiente o--> "0..*" Robo : contém
Ambiente o--> "0..*" Obstaculo : contém
Obstaculo --> TipoObstaculo
Robo --> MateriaisRobo
Robo --> TipoEntidade
Obstaculo --> TipoEntidade
Robo o--> "1..*" Sensor : possui
Robo o--> "1" GPS : possui
RoboAereo o--> "1" Barometro : possui
RoboAereo o--> "1" Radar : possui
RoboTerrestre o--> "1" Colisao : possui

' Implementações de interfaces
Robo ..|> Entidade
Robo ..|> Destrutivel
RoboAereo ..|> Identificantes
Obstaculo ..|> Entidade
Obstaculo ..|> Destrutivel
TanqueGuerra ..|> Atacante
DroneAtaque ..|> Atacante
Correios ..|> Comunicavel
DroneVigilancia ..|> Comunicavel

@enduml